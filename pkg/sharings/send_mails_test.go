package sharings_test

import (
	"fmt"
	"testing"

	"github.com/cozy/cozy-stack/client/auth"
	"github.com/cozy/cozy-stack/pkg/consts"
	"github.com/cozy/cozy-stack/pkg/contacts"
	"github.com/cozy/cozy-stack/pkg/couchdb"
	"github.com/cozy/cozy-stack/pkg/sharings"
	"github.com/stretchr/testify/assert"
)

var recStatus = sharings.Member{
	RefContact: couchdb.DocReference{
		Type: consts.Contacts,
	},
	Client: auth.Client{
		ClientID:     "",
		RedirectURIs: []string{},
	},
}

var mailValues = &sharings.MailTemplateValues{}

var sharingTest = &sharings.Sharing{
	SID:         "sparta-id",
	AppSlug:     "spartapp",
	SharingType: consts.OneShotSharing,
	Recipients:  []sharings.Member{recStatus},
}

var instanceScheme = "http"

func TestSendSharingMails(t *testing.T) {
	rec := &contacts.Contact{
		Cozy:  []contacts.Cozy{},
		Email: []contacts.Email{},
	}

	rec.Cozy = make([]contacts.Cozy, 1)

	// Add the recipient in the database.
	rec.Cozy[0].URL = "this.is.url"
	rec.Email = nil
	err := couchdb.CreateDoc(in, rec)
	if err != nil {
		fmt.Printf("%v\n", err)
		t.Fail()
	}
	defer couchdb.DeleteDoc(in, rec)
	// Set the id to the id generated by Couch.
	recStatus.RefContact.ID = rec.DocID

	err = sharings.SendMails(in, sharingTest)
	assert.NoError(t, err)
}
